Backup this file first

run the following command:
$ git checkout e1ded62
$ gradle cleanIdea idea
$ open wheel-showcase.ipr

In IDEA
    open Main.java
    run it
    see it "works without dependency injection"

Now let's try one simple injection example, all injectors(objects injected to other objects) and injectees(objects injected by other objects) should be annotated with @Component

run the following command:
$ git checkout 5d7d0e8
$ gradle cleanIdea idea

In IDEA
    reload the project
    open Main.java
    run it
    see it "works with one simple constructor injection"

Let's try setter injection. There are two ways to use setter inject: add @Inject to field and add @Inject to setter. In either way, setter should be present.

run the following command:
$ git checkout c3790d0
$ gradle cleanIdea idea

In IDEA
    reload the project
    open Main.java
    run it
    see it "car, truck, and jeep are all running"

Of course, Car can also have other dependencies.
Just using @Component and @Inject, you can accomplish the easy job as above.

--------------------------------------------------------------------------------------------------------

Let's try to make the application more OO by introducing a interface "Vehicle", and let Car, Truck, and Jeep all implement it. Replace all Car, Truck, Jeep with Vehicle in AppRunner.java, and see how it behavior.

run the following command:
$ git checkout 68d903a
$ gradle cleanIdea idea

In IDEA
    reload the project
    open Main.java
    run it
    see it "all vehicle become truck..."

That's because Container don't know which concrete class you want. Problem can be solved with Named @Component and @Qualified.