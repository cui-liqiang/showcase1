Backup this file first
------------------------------------------------------------------------------------------------------------------------------------------
run the following command:
$ git checkout e1ded62
$ gradle cleanIdea idea
$ open wheel-showcase.ipr

In IDEA
    open Main.java
    run it
    see it "works without dependency injection"

------------------------------------------------------------------------------------------------------------------------------------------
Now let's try one simple injection example, all injectors(objects injected to other objects) and injectees(objects injected by other objects) should be annotated with @Component


run the following command:
$ git checkout 5d7d0e8
$ gradle cleanIdea idea

In IDEA
    reload the project
    open Main.java
    run it
    see it "works with one simple constructor injection"

------------------------------------------------------------------------------------------------------------------------------------------
Let's try setter injection. There are two ways to use setter inject: add @Inject to field and add @Inject to setter. In either way, setter should be present.

run the following command:
$ git checkout c3790d0
$ gradle cleanIdea idea

In IDEA
    reload the project
    open Main.java
    run it
    see it "car, truck, and jeep are all running"

Of course, Car can also have other dependencies.
Just using @Component and @Inject, you can accomplish the easy job as above.

------------------------------------------------------------------------------------------------------------------------------------------

Let's try to make the application more OO by introducing a interface "Vehicle", and let Car, Truck, and Jeep all implement it. Replace all Car, Truck, Jeep with Vehicle in AppRunner.java, and see how it behavior.

run the following command:
$ git checkout 68d903a
$ gradle cleanIdea idea

In IDEA
    reload the project
    open Main.java
    run it
    see it "all vehicle become truck..."

That's because Container don't know which concrete class you want. Problem can be solved with Named @Component and @Qualified.

run the following command:
$ git checkout c3fce66
$ gradle cleanIdea idea

In IDEA
    reload the project
    open Main.java
    run it
    see it behavior correctly now.

Check out what happened to Car, Jeep, Truck, and AppRunner.

------------------------------------------------------------------------------------------------------------------------------------------

How about primitive type as constructor parameters? It's not quite likely to find a proper bean from IOC container with a primitive type...
See the MultiWheelVehicle freak below:

run the following command:
$ git checkout 2e67e6a
$ gradle cleanIdea idea

In IDEA
    reload the project
    open Main.java
    run it
    see it tells you what you should do.

Using xml configuration can solve the problem. But wait, don't use primitive as constructor parameter, and you can avoid the trouble. If you really want to do so, go ahead.

run the following command:
$ git checkout 9e6359c
$ gradle cleanIdea idea

In IDEA
    reload the project
    open Main.java
    run it
    see "multiWheelVehicle is running with 5 wheels".

------------------------------------------------------------------------------------------------------------------------------------------

xml config also support constructor injection and setter injection. See below:

run the following command:
$ git checkout 62dbb5c
$ gradle cleanIdea idea

In IDEA
 see "ioc-config.xml" config bean with cons and setter injection.

But when you run the application, it fail with "Found more than one candidates for type domain.AppRunner. Cannot determine which one to use!"
That's because now we have two beans generate by container. One is with @Component, one is configured in xml. So getting bean from container by id instead of by type can solve the problem.

run the following command:
$ git checkout c09383a
$ gradle cleanIdea idea

In IDEA
    reload the project
    open Main.java
    run it
    see it works well again.

If you pay attention to the configuration of "anotherAppRunner" in ioc-config.xml, you will find that which bean to use for cons/setter injection has no business with the annotations in source file. We can assign any compatible beans to any constructor parameter and setter no matter what the @Qualified annotation says.

------------------------------------------------------------------------------------------------------------------------------------------

You can mix xml config and package scan together to define beans and inject beans

------------------------------------------------------------------------------------------------------------------------------------------

In terms of bean scope, you can configure it in either xml or annotation:

